syntax = "proto3";
option go_package="theterriblechild/CloudApp/applications/adminapp/model";
package adminservice;

import "google/api/annotations.proto";
import "commontype.proto";
import "model/model.proto";

//============================Account Service============================

service AccountService{
    rpc CreateAccount(CreateAccountMessage) returns (commontype.Empty) {
        option (google.api.http) = {
			post: "/api/admin/v1/accounts"
			body: "*"
		};
    };
}

message CreateAccountMessage{
    string name = 1;
    CreateUserMessage create_user = 2;
}

//============================User Service===============================
service UserService{
    rpc CreateUser(CreateUserMessage) returns (commontype.Empty) {
        option (google.api.http) = {
			post: "/admin/v1/users"
			body: "*"
		};
    }
    rpc GetUser(commontype.GetMessage) returns (model.User){
        option (google.api.http) = {
			get: "/api/admin/v1/users/{id}"
		};
    }

    rpc SetPassword(SetPasswordMessage) returns (commontype.Empty) {
        option (google.api.http) = {
            post: "/api/admin/v1/users/{id}/password"
            body: "*"
        };
    }

    rpc SetPasswordWithToken(SetPasswordWithTokenMessage) returns (commontype.Empty) {
        option (google.api.http) = {
            post: "/api/admin/v1/users/password"
            body: "*"
        };
    }

    rpc ResetPassword(ResetPasswordMessage) returns (commontype.Empty) {
        option (google.api.http) = {
            post: "/api/admin/v1/users/resetpassword"
            body: "*"
        };
    }
}

message CreateUserMessage{
    string user_creation_token = 1;
    string password = 2;
}

message SetPasswordMessage{
    string id = 1;
    string old_password = 2;
    string new_password = 3;
}

message SetPasswordWithTokenMessage{
    string id = 1;
    string new_password = 2;
}

message ResetPasswordMessage{
    string user_email = 1;
}

//============================Agent Service==============================
service AgentService{
    rpc CreateAgent(CreateAgentMessage) returns (commontype.Empty) {
        option (google.api.http) = {
			post: "/api/admin/v1/accounts/{account_id}/agents"
			body: "*"
		};
    }
}

message CreateAgentMessage {
    string account_id = 1;
    string agent_name = 2;
}

//============================Registration Service=======================
service RegistrationService{
    rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {
        option (google.api.http) = {
			post: "/api/admin/v1/register/user"
			body: "*"
		};
    };
    rpc ConfirmCode (ConfirmCodeRequest) returns (ConfirmCodeResponse){
        option (google.api.http) = {
			post: "/api/admin/v1/register/verify"
			body: "*"
		};
    };
}

message RegisterUserRequest {
    string email = 1;
}

message RegisterUserResponse {
    string verification_token = 1;
}

message ConfirmCodeRequest {
    string verification_token = 1;
    string verification_code = 2;
}

message ConfirmCodeResponse {
    bool success = 1;
    string user_creation_token = 2;
}

//============================Authentication Service=====================
service AuthenticationService{
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/auth/v1/login"
            body: "*"
        };
    }
}

message LoginRequest {
    string email = 1;
    string password = 2;
    string token = 3;
}

message LoginResponse {

}