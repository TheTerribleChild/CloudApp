syntax = "proto3";
option go_package="theterriblechild/CloudApp/applications/adminapp/model";
package adminservice;

import "google/api/annotations.proto";
import "commontype.proto";
import "model/model.proto";

//============================Account Service============================

service AccountService {
    rpc CreateAccount (CreateAccountRequest) returns (commontype.Empty) {
        option (google.api.http) = {
          post: "/api/admin/v1/accounts"
          body: "*"
        };
    };
}

message CreateAccountRequest {
    string name = 1;
    CreateUserRequest create_user = 2;
}

//============================User Service===============================
service UserService {
    rpc CreateUser (CreateUserRequest) returns (commontype.Empty) {
        option (google.api.http) = {
          post: "/admin/v1/users"
          body: "*"
        };
    }
    rpc GetUser (commontype.GetMessage) returns (model.User) {
        option (google.api.http) = {
          get: "/api/admin/v1/users/{id}"
        };
    }

    rpc SetPassword (SetPasswordRequest) returns (commontype.Empty) {
        option (google.api.http) = {
            post: "/api/admin/v1/users/{id}/password"
            body: "*"
        };
    }

    rpc SetPasswordWithToken (SetPasswordWithTokenRequest) returns (commontype.Empty) {
        option (google.api.http) = {
            post: "/api/admin/v1/users/password"
            body: "*"
        };
    }

    rpc ResetPassword (ResetPasswordRequest) returns (commontype.Empty) {
        option (google.api.http) = {
            post: "/api/admin/v1/users/resetpassword"
            body: "*"
        };
    }
}

message CreateUserRequest {
    string user_creation_token = 1;
    string password = 2;
}

message SetPasswordRequest {
    string id = 1;
    string new_password = 2;
}

message SetPasswordWithTokenRequest {
    string password_reset_token = 1;
    string new_password = 2;
}

message ResetPasswordRequest {
    string user_email = 1;
}

//============================Agent Service==============================
service AgentService{
    rpc RegisterAgent(CreateAgentRequest) returns (CreateAgentResponse) {
        option (google.api.http) = {
          post: "/api/admin/v1/accounts/{account_id}/agents"
          body: "*"
        };
    }

    rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse) {
        option (google.api.http) = {
          get: "/api/admin/v1/accounts/{account_id}/agents"
        };
    }

    rpc UpdateAgent(model.Agent) returns (model.Agent) {
        option (google.api.http) = {
          put: "/api/admin/v1/accounts/{account_id}/agents/{id}"
          body: "*"
        };
    }

    rpc DeleteAgent(model.Agent) returns (commontype.Empty) {
        option (google.api.http) = {
          delete: "/api/admin/v1/accounts/{account_id}/agents/{id}"
        };
    }
}

message CreateAgentRequest {
    string account_id = 1;
    string agent_name = 2;
}

message CreateAgentResponse {
    model.Agent agent = 1;
    string agent_token = 2;
}

message ListAgentsRequest {
    string account_id = 1;
    commontype.Search search = 2;
}

message ListAgentsResponse {
    repeated model.Agent agents = 1;
}

//============================Registration Service=======================
service RegistrationService{
    rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {
        option (google.api.http) = {
          post: "/api/admin/v1/register/user"
          body: "*"
        };
    };
    rpc ConfirmCode (ConfirmCodeRequest) returns (ConfirmCodeResponse){
        option (google.api.http) = {
          post: "/api/admin/v1/register/verify"
          body: "*"
        };
    };
}

message RegisterUserRequest {
    string email = 1;
}

message RegisterUserResponse {
    string verification_token = 1;
}

message ConfirmCodeRequest {
    string verification_token = 1;
    string verification_code = 2;
}

message ConfirmCodeResponse {
    bool success = 1;
    string password_reset_token = 2;
}

//============================Authentication Service=====================
service AuthenticationService{
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/auth/v1/login"
            body: "*"
        };
    }
}

message LoginRequest {
    string email = 1;
    string password = 2;
    string token = 3;
}

message LoginResponse {
    string user_id = 1;
    string email = 2;
    string account_id = 3;
    string access_token = 4;
}